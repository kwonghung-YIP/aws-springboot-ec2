AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Create 3 springboot EC2 instances + ALB, deploy the application with CodeDeploy

Parameters:
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
  
  MyIpAddress:
    Description: My IP Address
    Type: String
    Default: 82.35.77.174/32
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #
  # Using System Manager Public Parameters as aliases to get the AMI ID
  # https://aws.amazon.com/blogs/compute/using-system-manager-parameter-as-an-alias-for-ami-id/
  #
  ImageId:
    Description: Amazon Linux 2023 AMI ImageId (eu-north-1)
    #Type: String
    #Default: ami-0368b2c10d7184bc7
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  SshKeyName:
    Description: Name of the ssh keypair
    Type: String
    Default: "sshKeyForEC2"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "Use my default VpcId if this parameter is not provided"
    Default: "vpc-0fe6b72cebb18def1"

  ArtifactsBucketName:
    Description: Artifacts Bucket Name for CodeDeploy
    Type: String
    Default: "springboot-ec2-stack-artifacts-bucket"

  GitHubConnectionArn:
    Type: String
    Default: "arn:aws:codeconnections:eu-north-1:796973491384:connection/1b0b695e-3d55-463e-a46e-5e7586e4cdc0"
  GitHubRepo:
    Type: String
    Default: "kwonghung-YIP/aws-springboot-ec2"
  GitHubSourceBranch:
    Type: String
    Default: "main"

Mappings:
  RegionConfigMap:
    eu-north-1:
      AZ: [ eu-north-1a, eu-north-1b,eu-north-1c ]
      SubnetId:
        - subnet-01b85b47ea697c1e4
        - subnet-026401f613174203a
        - subnet-081aac5a690b7a1a8

Conditions:
  LaunchALB: !Equals ["1","2"]
  CreateGitHubConnection: !Equals [!Ref GitHubConnectionArn, ""]

Resources:
  IAMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref CodeDeployEC2InstanceRole

  CodeDeployEC2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: IAM EC2 Instance Profile
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Bucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: !Sub 
                  - "${artifacts_bucket_arn}/*"
                  - artifacts_bucket_arn: !GetAtt SpringbootArtifactsBucket.Arn

  EC2CloudWatchAgentConfig:
    #
    # AWS::SSM::Parameter Reference
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
    #
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: cloudwatch-agent-config
      Description: CloudWatch Agent Config for EC2 instance
      Tier: Standard # Standard|Advanced|Intelligent-Tiering
      Type: String # String|StringList
      DataType: text # text|aws:ec2:image
      Value: >
        {
          "agent": {
            "metrics_collection_interval": 30,
            "run_as_user": "cwagent"
          },
          "logs": {
            "logs_collected": {
              "files": {
              "collect_list": [
                {
                "file_path": "/springboot-app/app.log",
                "log_group_class": "STANDARD",
                "log_group_name": "springboot.log",
                "log_stream_name": "{instance_id}",
                "retention_in_days": 1
                }
              ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "disk": {
              "measurement": [
                "used_percent"
              ],
              "metrics_collection_interval": 30,
              "resources": [
                "*"
              ]
              },
              "mem": {
              "measurement": [
                "mem_used_percent"
              ],
              "metrics_collection_interval": 30
              }
            }
          }
        }
  SshKey:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: !Ref SshKeyName
      KeyFormat: pem # pem|ppk 
      KeyType: ed25519 # rsa|ed25519

  SshSecurityGroup:
    #
    # AWS::EC2::SecurityGroup Reference
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html
    #
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ssh-security-group
      GroupDescription: Allowing incoming ssh access from my remote IP
      SecurityGroupIngress:
        - #CidrIp: !Ref MyIpAddress #either one must be defined CidrIp, CidrIpv6, SourcePrefixListId, SourceSecurityGroupId
          CidrIp: 0.0.0.0/0 # allow all IP source including codedeploy-agent-service
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      #VpcId: #Skip this one to use default VPC

  SpringbootSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: springboot-security-group
      GroupDescription: Springboot HTTP port
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080

  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: ALB-security-group
      GroupDescription: ALB HTTP/S services
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 8080

  SpringbootLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    DependsOn: IAMInstanceProfile
    Metadata:
      #
      # AWS::CloudFormation::Init Reference
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      #
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              ruby3.2.x86_64: []
              java-21-amazon-corretto-devel.x86_64: []
              maven-amazon-corretto21: []
              amazon-cloudwatch-agent: []
          files:
            "/home/ec2-user/install":
              source: !Sub 
                - "https://${bucket_name}.s3.${region_identifier}.amazonaws.com/${version}/install"
                - bucket_name: aws-codedeploy-eu-north-1
                  region_identifier: eu-north-1
                  version: latest
              mode: "000755"

          commands:
            install-codedeploy-agent:
              command: "./install auto"
              cwd: "/home/ec2-user"
            start-cloudwatch-agent:
              command: !Sub 
                - "amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssm_param_name} -s"
                - ssm_param_name: !Ref EC2CloudWatchAgentConfig
              cwd: "/opt/aws/amazon-cloudwatch-agent/bin/"
          services:
            systemd:
              codedeploy-agent:
                enabled: "true"
                ensureRunning: "true"
              amazon-cloudwatch-agent:
                enabled: "true"
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-springboot-ec2-launch-template"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref ImageId
        KeyName: !Ref SshKey
        SecurityGroupIds:
          - !GetAtt SshSecurityGroup.GroupId
          - !GetAtt SpringbootSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: "instance" # instance | volume | network-interface | spot-instances-request
            Tags:
              - Key: "Name"
                Value: "springboot-instance"
        IamInstanceProfile: 
          Arn: !GetAtt IAMInstanceProfile.Arn
        #
        # cfn-init reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html
        #
        UserData: !Base64
          'Fn::Sub': 
            - >
              #!/bin/bash -xe

              yum update -y aws-cfn-bootstrap

              /opt/aws/bin/cfn-init -v \
                --stack ${AWS::StackName} \
                --region ${AWS::Region} \
                --resource SpringbootLaunchTemplate
            - {}

  SpringbootEC21a:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: !Select [0, !FindInMap [RegionConfigMap,!Ref "AWS::Region", AZ]]
      LaunchTemplate:
        LaunchTemplateId: !Ref SpringbootLaunchTemplate
        Version: !GetAtt SpringbootLaunchTemplate.DefaultVersionNumber

  SpringbootEC21b:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: !Select [1, !FindInMap [RegionConfigMap,!Ref "AWS::Region", AZ]]
      LaunchTemplate:
        LaunchTemplateId: !Ref SpringbootLaunchTemplate
        Version: !GetAtt SpringbootLaunchTemplate.DefaultVersionNumber

  SpringbootEC21c:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: !Select [2, !FindInMap [RegionConfigMap,!Ref "AWS::Region", AZ]]
      LaunchTemplate:
        LaunchTemplateId: !Ref SpringbootLaunchTemplate
        Version: !GetAtt SpringbootLaunchTemplate.DefaultVersionNumber

  SpringbootTargetGroup:
    #
    # CloudFormation Reference - AWS::ElasticLoadBalancingV2::TargetGroup
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    #
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: springboot-ec2-target-group
      Port: 8080
      Protocol: HTTP # HTTP|HTTPS for Application Load Balancers, TCP|TLS|UPD|TCP_UDP for NLB, ...
      TargetType: instance # instance|ip|lambda|alb
      Targets:
        - Id: !GetAtt SpringbootEC21a.InstanceId
        - Id: !GetAtt SpringbootEC21b.InstanceId
        - Id: !GetAtt SpringbootEC21c.InstanceId
      #HealthCheckEnabled: true # Only can be disabled if TargetType is lambda
      #HealthCheckIntervalSeconds: 15
      #HealthCheckTimeoutSeconds: 3
      #HealthyThresholdCount: 3
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"
      VpcId: !Ref VpcId

  SpringbootALB:
    #
    # CloudFormarion Reference - AWS::ElasticLoadBalancingV2::LoadBalancer
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    #
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: LaunchALB
    Properties:
      Name: springboot-ALB
      Type: application # application|network|gateway
      Scheme: internet-facing # internet-facing|internal
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      SubnetMappings:
        - SubnetId: !Select [0, !FindInMap [RegionConfigMap,!Ref "AWS::Region", SubnetId]]
        - SubnetId: !Select [1, !FindInMap [RegionConfigMap,!Ref "AWS::Region", SubnetId]]
        - SubnetId: !Select [2, !FindInMap [RegionConfigMap,!Ref "AWS::Region", SubnetId]]

  ALBHttpListener:
    #
    # CloudFormation Reference - AWS::ElasticLoadBalancingV2::Listener
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    #
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: LaunchALB
    Properties:
      LoadBalancerArn: !GetAtt SpringbootALB.LoadBalancerArn
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: forward # forward|authenticate-oidc|authenticate-cognito|redirect|fixed-response
          TargetGroupArn: !Ref SpringbootTargetGroup # for forward type
          # AuthenticateOidcConfig # for authenticate-oidc type [HTTPS Listeners]
          # AuthenticateCognitoConfig # for authenticate-cognito type [HTTPS Listeners]
          # RedirectConfig # for redirect type
          # FixedResponseConfig # for fixed-response type

  SpringbootArtifactsBucket:
    Type: AWS::S3::Bucket
    # Bucket cannot be deleted if it is not empty
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: CodeDeploy Service Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: springboot-application
      ComputePlatform: Server # Server|Lambda|ECS

  CodeDeployDeploymentGroup:
    #
    # AWS::CodeDeploy::DeploymentGroup Reference
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-s3location.html
    #
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      #Deployment:
      #  Description: "Springboot EC2 DeploymentGroup"
      #  IgnoreApplicationStopFailures: "false"
      #  Revision:
      #    RevisionType: S3 # S3|GitHub|String|AppSpecContent
      #    S3Location:
      #      Bucket: !Ref ArtifactsBucketName
      #      BundleType: zip # tar|tgz|zip|YAML|JSON
      #      Key: application.zip
      #DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters:
        - Type: KEY_AND_VALUE # KEY_ONLY|VALUE_ONLY|KEY_AND_VALUE
          Key: Name
          Value: springboot-instance
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn

  GitHubCodeStarConnection:
    Condition: CreateGitHubConnection
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: GitHubConnection
      ProviderType: GitHub

  PipelineDefaultRole:
    Type: AWS::IAM::Role
    Properties:
      Description: >
        IAM Role for CodePipeline to use to either perform actions with no actionRoleArn, 
        or to use to assume roles for actions with an actionRoleArn. Assign to 
        "AWS::CodePipeline::Pipeline" "RoleArn" property

        Reference:
        https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html#cfn-codepipeline-pipeline-rolearn
      
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Policies:
        - PolicyName: codestarconnections
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codestar-connections:UseConnection"
                Resource: !If [CreateGitHubConnection, !Ref GitHubCodeStarConnection, !Ref GitHubConnectionArn]
        - PolicyName: artifactsbucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: 
                  Fn::Sub: ${SpringbootArtifactsBucket.Arn}/*
        - PolicyName: iamrole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: 
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"
        - PolicyName: codebuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - !GetAtt CodeBuildProjectMavenBuild.Arn

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref SpringbootArtifactsBucket
        Type: S3
      #
      # The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn.
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html#cfn-codepipeline-pipeline-rolearn
      #
      RoleArn: !GetAtt PipelineDefaultRole.Arn
      # Indicates whether to rerun the CodePipeline pipeline after you update it.
      RestartExecutionOnUpdate: false
      Stages:
        - Name: Source
          Actions:
            - Name: clone-from-github-repo
              ActionTypeId:
                Category: Source # Source|Build|Test|Deploy|Invoke|Approval|Compute
                Owner: AWS # AWS|ThridParty|Custom
                #
                # Valid action providers in CodePipeline
                # https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-valid-providers.html
                #
                Provider: CodeStarSourceConnection
                Version: "1"
              #
              # Action Provider: CodeStarSourceConnetion for GitHub
              # https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
              #
              Configuration:
                ConnectionArn: !If [CreateGitHubConnection, !Ref GitHubCodeStarConnection, !Ref GitHubConnectionArn]
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubSourceBranch
                OutputArtifactFormat: CODE_ZIP #CODE_ZIP|CODEBUILD_CLONE_REF
              #
              # Valid input and output artifacts for each action type
              # https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-action-artifacts.html
              #
              OutputArtifacts:
                - Name: GitHubSourceZip
        - Name: Build
          Actions:
            - Name: maven-build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProjectMavenBuild
              InputArtifacts:
                - Name: GitHubSourceZip
              OutputArtifacts:
                - Name: AppBuildArtifactZip

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: cloudwatchlogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
        - PolicyName: artifactbucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${SpringbootArtifactsBucket}/*"
        - PolicyName: sts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sts:AssumeRole"
                Resource:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*"

  CodeBuildProjectMavenBuild:
    #
    # AWS::CodeBuild::Project Configuration Reference
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html
    #
    Type: AWS::CodeBuild::Project
    Properties:
      Description: >
        Build and Test Springboot with Maven
      Artifacts:
        Type: CODEPIPELINE # CODEPIPELINE|S3|NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        #
        # Docker Images provided by Code Build
        # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        #
        Image: aws/codebuild/amazonlinux-x86_64-standard:5.0
        # Enable running Docker daemon in a Docker container
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: APP_TEMPLATE
            Value: template.yaml
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        # BITBUCKET | CODECOMMIT | CODEPIPELINE | GITHUB | GITHUB_ENTERPRISE
        # GITLAB | GITLAB_SELF_MANAGED | NO_SOURCE | S3
        Type: CODEPIPELINE
        BuildSpec: 03-springboot-ec2-codedeploy/codebuild/buildspec.yml

Outputs:
  sshKeyPairId:
    Value: !GetAtt SshKey.KeyPairId

  ec2Instane1aSsh:
    Description: ssh command to springboot instance on AZ eu-north-1a
    Value: !Sub 
      - "ssh -o 'StrictHostKeyChecking no' ec2-user@${PublicIp}"
      - PublicIp: !GetAtt SpringbootEC21a.PublicIp

  ec2Instane1bSsh:
    Description: ssh command to springboot instance on AZ eu-north-1b
    Value: !Sub 
      - "ssh -o 'StrictHostKeyChecking no' ec2-user@${PublicIp}"
      - PublicIp: !GetAtt SpringbootEC21b.PublicIp

  ec2Instane1cSsh:
    Description: ssh command to springboot instance on AZ eu-north-1c
    Value: !Sub 
      - "ssh -o 'StrictHostKeyChecking no' ec2-user@${PublicIp}"
      - PublicIp: !GetAtt SpringbootEC21c.PublicIp

  ALBDNSName:
    Condition: LaunchALB
    Description: Testing URL to Application Load Balancer
    Value: !Sub 
      - "http://${ALBDnsName}:8080/echo?name=john"
      - ALBDnsName: !GetAtt SpringbootALB.DNSName

